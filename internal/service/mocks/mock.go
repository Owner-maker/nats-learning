// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/Owner-maker/nats-learning/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// GetAllCachedOrders mocks base method.
func (m *MockOrder) GetAllCachedOrders() ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCachedOrders")
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCachedOrders indicates an expected call of GetAllCachedOrders.
func (mr *MockOrderMockRecorder) GetAllCachedOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCachedOrders", reflect.TypeOf((*MockOrder)(nil).GetAllCachedOrders))
}

// GetAllDbOrders mocks base method.
func (m *MockOrder) GetAllDbOrders() ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDbOrders")
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDbOrders indicates an expected call of GetAllDbOrders.
func (mr *MockOrderMockRecorder) GetAllDbOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDbOrders", reflect.TypeOf((*MockOrder)(nil).GetAllDbOrders))
}

// GetCachedOrder mocks base method.
func (m *MockOrder) GetCachedOrder(uid string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedOrder", uid)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedOrder indicates an expected call of GetCachedOrder.
func (mr *MockOrderMockRecorder) GetCachedOrder(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedOrder", reflect.TypeOf((*MockOrder)(nil).GetCachedOrder), uid)
}

// GetDbOrder mocks base method.
func (m *MockOrder) GetDbOrder(uid string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDbOrder", uid)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDbOrder indicates an expected call of GetDbOrder.
func (mr *MockOrderMockRecorder) GetDbOrder(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDbOrder", reflect.TypeOf((*MockOrder)(nil).GetDbOrder), uid)
}

// PutCachedOrder mocks base method.
func (m *MockOrder) PutCachedOrder(order models.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCachedOrder", order)
}

// PutCachedOrder indicates an expected call of PutCachedOrder.
func (mr *MockOrderMockRecorder) PutCachedOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCachedOrder", reflect.TypeOf((*MockOrder)(nil).PutCachedOrder), order)
}

// PutDbOrder mocks base method.
func (m *MockOrder) PutDbOrder(order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDbOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutDbOrder indicates an expected call of PutDbOrder.
func (mr *MockOrderMockRecorder) PutDbOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDbOrder", reflect.TypeOf((*MockOrder)(nil).PutDbOrder), order)
}

// PutOrdersFromDbToCache mocks base method.
func (m *MockOrder) PutOrdersFromDbToCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOrdersFromDbToCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// PutOrdersFromDbToCache indicates an expected call of PutOrdersFromDbToCache.
func (mr *MockOrderMockRecorder) PutOrdersFromDbToCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOrdersFromDbToCache", reflect.TypeOf((*MockOrder)(nil).PutOrdersFromDbToCache))
}
